// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PosgreSqlPovider;

namespace PosgreSqlPovider.Migrations
{
    [DbContext(typeof(PokerDbContext))]
    [Migration("20201026205256_InitialCommit")]
    partial class InitialCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Common.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.HasKey("Id");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("Common.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BoardId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerGameSnapshotId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoundId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("PlayerGameSnapshotId");

                    b.HasIndex("RoundId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Common.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("BigBlind")
                        .HasColumnType("double precision");

                    b.Property<int?>("BoardId")
                        .HasColumnType("integer");

                    b.Property<string>("ButtonSeatStringPart")
                        .HasColumnType("text");

                    b.Property<string>("GameLimit")
                        .HasColumnType("text");

                    b.Property<int>("GameType")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayersCount")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<double>("SmallBlind")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalBank")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Common.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Common.PlayerAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<double>("Money")
                        .HasColumnType("double precision");

                    b.Property<int?>("PlayerGameSnapshotId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoundId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerGameSnapshotId");

                    b.HasIndex("RoundId");

                    b.ToTable("PlayerAction");
                });

            modelBuilder.Entity("Common.PlayerGameSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("CollectedMoney")
                        .HasColumnType("double precision");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<double>("GaveMoneyToBank")
                        .HasColumnType("double precision");

                    b.Property<double>("MoneyOnStart")
                        .HasColumnType("double precision");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGameSnapshot");
                });

            modelBuilder.Entity("Common.PlayerStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("PlayerGameSnapshotId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalEnterFlop")
                        .HasColumnType("integer");

                    b.Property<int>("TotalEnterRiver")
                        .HasColumnType("integer");

                    b.Property<int>("TotalEnterShowDown")
                        .HasColumnType("integer");

                    b.Property<int>("TotalEnterTurn")
                        .HasColumnType("integer");

                    b.Property<int>("TotalGames")
                        .HasColumnType("integer");

                    b.Property<int>("WinnedBlinds")
                        .HasColumnType("integer");

                    b.Property<double>("WinnedMoney")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PlayerGameSnapshotId");

                    b.ToTable("PlayerStatistic");
                });

            modelBuilder.Entity("Common.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("RoundType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.HasKey("GamesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("PlayerGame");
                });

            modelBuilder.Entity("PlayerGameSnapshotRound", b =>
                {
                    b.Property<int>("StartedPlayersId")
                        .HasColumnType("integer");

                    b.Property<int>("StartedRoundsId")
                        .HasColumnType("integer");

                    b.HasKey("StartedPlayersId", "StartedRoundsId");

                    b.HasIndex("StartedRoundsId");

                    b.ToTable("StartedPlayerRound");
                });

            modelBuilder.Entity("PlayerGameSnapshotRound1", b =>
                {
                    b.Property<int>("FinishedPlayersId")
                        .HasColumnType("integer");

                    b.Property<int>("FinishedRoundsId")
                        .HasColumnType("integer");

                    b.HasKey("FinishedPlayersId", "FinishedRoundsId");

                    b.HasIndex("FinishedRoundsId");

                    b.ToTable("FinishedPlayerRound");
                });

            modelBuilder.Entity("Common.Card", b =>
                {
                    b.HasOne("Common.Board", null)
                        .WithMany("Cards")
                        .HasForeignKey("BoardId");

                    b.HasOne("Common.PlayerGameSnapshot", null)
                        .WithMany("Cards")
                        .HasForeignKey("PlayerGameSnapshotId");

                    b.HasOne("Common.Round", null)
                        .WithMany("Cards")
                        .HasForeignKey("RoundId");
                });

            modelBuilder.Entity("Common.Game", b =>
                {
                    b.HasOne("Common.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Common.PlayerAction", b =>
                {
                    b.HasOne("Common.PlayerGameSnapshot", "PlayerGameSnapshot")
                        .WithMany()
                        .HasForeignKey("PlayerGameSnapshotId");

                    b.HasOne("Common.Round", null)
                        .WithMany("PlayerActions")
                        .HasForeignKey("RoundId");

                    b.Navigation("PlayerGameSnapshot");
                });

            modelBuilder.Entity("Common.PlayerGameSnapshot", b =>
                {
                    b.HasOne("Common.Game", "Game")
                        .WithMany("PlayerGameSnapshots")
                        .HasForeignKey("GameId");

                    b.HasOne("Common.Player", "Player")
                        .WithMany("PlayerGameSnapshots")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Common.PlayerStatistic", b =>
                {
                    b.HasOne("Common.Player", "PlayerGameSnapshot")
                        .WithMany()
                        .HasForeignKey("PlayerGameSnapshotId");

                    b.Navigation("PlayerGameSnapshot");
                });

            modelBuilder.Entity("Common.Round", b =>
                {
                    b.HasOne("Common.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.HasOne("Common.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerGameSnapshotRound", b =>
                {
                    b.HasOne("Common.PlayerGameSnapshot", null)
                        .WithMany()
                        .HasForeignKey("StartedPlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Round", null)
                        .WithMany()
                        .HasForeignKey("StartedRoundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerGameSnapshotRound1", b =>
                {
                    b.HasOne("Common.PlayerGameSnapshot", null)
                        .WithMany()
                        .HasForeignKey("FinishedPlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Round", null)
                        .WithMany()
                        .HasForeignKey("FinishedRoundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Board", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Common.Game", b =>
                {
                    b.Navigation("PlayerGameSnapshots");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Common.Player", b =>
                {
                    b.Navigation("PlayerGameSnapshots");
                });

            modelBuilder.Entity("Common.PlayerGameSnapshot", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Common.Round", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("PlayerActions");
                });
#pragma warning restore 612, 618
        }
    }
}
